from pyspark.sql import SparkSession
from pyspark.sql.types import *
import random
from pyspark.sql.functions import lit

# Initialize Spark Session
spark = SparkSession.builder.appName("MergeDataFrames").getOrCreate()

# Function to generate random schema
def generate_random_schema(prefix, num_cols):
    data_types = [IntegerType(), StringType(), FloatType(), BooleanType(), DoubleType(), TimestampType()]
    schema = StructType([
        StructField(f"{prefix}_column{i+1}", random.choice(data_types), True) 
        for i in range(num_cols)
    ])
    return schema

# Generate schema for both DataFrames
schema1 = generate_random_schema("table1", 60)
schema2 = generate_random_schema("table2", 10)

# Function to generate random row based on schema
def generate_random_row(schema):
    def random_value(data_type):
        if isinstance(data_type, IntegerType):
            return random.randint(1, 100)
        elif isinstance(data_type, StringType):
            return f"str_{random.randint(1, 1000)}"
        elif isinstance(data_type, FloatType):
            return round(random.uniform(1.0, 100.0), 2)
        elif isinstance(data_type, BooleanType):
            return random.choice([True, False])
        elif isinstance(data_type, DoubleType):
            return round(random.uniform(1.0, 100.0), 5)
        elif isinstance(data_type, TimestampType):
            from datetime import datetime, timedelta
            return datetime.now() - timedelta(days=random.randint(1, 365))
        else:
            return None

    return [random_value(field.dataType) for field in schema]

# Generate data for both DataFrames
data1 = [generate_random_row(schema1) for _ in range(5000)]
data2 = [generate_random_row(schema2) for _ in range(5000)]

# Create DataFrames
df1 = spark.createDataFrame(data1, schema=schema1)
df2 = spark.createDataFrame(data2, schema=schema2)

# 1. Add missing columns to df1 (from df2)
for col_name in df2.columns:
    if col_name not in df1.columns:
        df1 = df1.withColumn(col_name, lit(None))  

# 2. Add missing columns to df2 (from df1)
for col_name in df1.columns:
    if col_name not in df2.columns:
        df2 = df2.withColumn(col_name, lit(None))  

# 3. Ensure both DataFrames have the same column order
df2 = df2.select(df1.columns)

# 4. Merge DataFrames row-wise
final_df = df1.unionByName(df2)

# Show schema and sample data
final_df.printSchema()
final_df.show(5)
